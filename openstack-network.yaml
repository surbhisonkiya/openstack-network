tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/4.5.5/types.yaml
  - plugin:cloudify-openstack-plugin?version=3.1.0


inputs:

  region:
    type: string
    description: The Openstack region.

  external_network_id:
    type: string
    description: A network that provisions floating IPs.

  network_id:
    type: string
    description: A name for your new Openstack Network.
    default: cloudify-hello-world-network

  subnet_id:
    type: string
    description: A name for your new Openstack Subnet.
    default: cloudify-hello-world-subnet


dsl_definitions:

  openstack_config: &openstack_config
    auth_url: { get_secret: openstack_auth_url }
    region_name: { get_input: region }
    project_name: { get_secret: openstack_tenant_name }
    username: { get_secret: openstack_username }
    password: { get_secret: openstack_password }
    user_domain_name: { get_secret: user_domain_name }
    project_domain_name: { get_secret: project_domain_name }

node_templates:

  public-subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *openstack_config
      resource_config:
        name: { get_input: subnet_id }
        ip_version: 4
        cidr: 10.10.4.0/24
        dns_nameservers: [8.8.4.4, 8.8.8.8]
        allocation_pools:
        - start: 10.10.4.2
          end: 10.10.4.254
    relationships:
      - type: cloudify.relationships.contained_in
        target: public-network
      - type: cloudify.relationships.openstack.subnet_connected_to_router
        target: router

  private-subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *openstack_config
      resource_config:
        name: { get_input: subnet_id }
        ip_version: 4
        cidr: 10.10.2.0/24
        dns_nameservers: [8.8.4.4, 8.8.8.8]
        allocation_pools:
        - start: 10.10.2.2
          end: 10.10.2.254
    relationships:
      - type: cloudify.relationships.contained_in
        target: private-network
      - type: cloudify.relationships.openstack.subnet_connected_to_router
        target: router

  public-network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *openstack_config
      resource_config:
        name: { get_input: network_id }

  private-network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *openstack_config
      resource_config:
        name: { get_input: network_id }

  router:
    type: cloudify.nodes.openstack.Router
    properties:
      client_config: *openstack_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: external-network

  external-network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        name: { get_input: external_network_id }
        kwargs:
          routing:
            external: true

outputs:

  router:
    value: { get_attribute: [ router, external_id ] }

